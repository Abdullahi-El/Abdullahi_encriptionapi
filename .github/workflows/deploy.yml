name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest  # Use a single runner for both build and deploy

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up .NET 8
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      - name: Restore NuGet packages
        run: dotnet restore encriptionapi.sln

      - name: Build the solution
        run: dotnet build encriptionapi.sln -c Release

      - name: Run tests
        run: dotnet test ./encriptionapi.csproj --configuration Release --logger "trx;LogFileName=test-results.trx"

      - name: Publish the project
        run: |
          dotnet publish ./encriptionapi.csproj -c Release -o ./publish
          ls -l ./publish  # Verify the .runtimeconfig.json file is present

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to AWS
        run: |
          set -e  # Exit immediately if any command fails

          # Create a ZIP file from the published application
          cd ./publish
          zip -r ../EncryptionApi.zip .
          cd ..

          # Debug ZIP file
          unzip -l EncryptionApi.zip

          # Upload the ZIP file to S3
          aws s3 cp EncryptionApi.zip s3://deploybucket-log/

          # Create a new application version
          VERSION_LABEL=$(echo "${{ github.sha }}" | cut -c1-100)
          aws elasticbeanstalk create-application-version \
            --application-name Appdeploy \
            --version-label $VERSION_LABEL \
            --source-bundle S3Bucket="deploybucket-log",S3Key="EncryptionApi.zip"

          # Debug AWS CLI commands
          aws elasticbeanstalk describe-application-versions --application-name Appdeploy --version-labels $VERSION_LABEL

          # Update the environment to use the new version
          aws elasticbeanstalk update-environment \
            --environment-name Appdeploy-env \
            --version-label $VERSION_LABEL
